// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using payment_api.Infrastructure.Database;

namespace payment_api.Migrations.Server
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20201024042019_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("payment_api.Models.PaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Anticipated")
                        .HasColumnType("boolean");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreditCard")
                        .HasColumnType("text");

                    b.Property<float>("LiquidValue")
                        .HasColumnType("real");

                    b.Property<float>("RawValue")
                        .HasColumnType("real");

                    b.Property<float>("Tax")
                        .HasColumnType("real");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("payment_api.Models.PaymentInstallmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("AntecipatedTranfer")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("AnticipatedValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("integer");

                    b.Property<float>("LiquidValue")
                        .HasColumnType("real");

                    b.Property<int?>("PaymentEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<float>("RawValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PaymentEntityId");

                    b.ToTable("PaymentInstallmentEntity");
                });

            modelBuilder.Entity("payment_api.Models.PaymentInstallmentEntity", b =>
                {
                    b.HasOne("payment_api.Models.PaymentEntity", null)
                        .WithMany("PaymentInstallments")
                        .HasForeignKey("PaymentEntityId");
                });

            modelBuilder.Entity("payment_api.Models.PaymentEntity", b =>
                {
                    b.Navigation("PaymentInstallments");
                });
#pragma warning restore 612, 618
        }
    }
}
